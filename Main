import pygame

class Case():
    
    def __init__(self, coordonnées, materiau):
        listeMat = {'terre' : (22, 23, 24, 25, 26, 27, 44, 50, 56), 'bois' : (28, 9999), 'carrelage' : (130, 156, 181), 'conduit' : (53, 9999), 'grillage' : (45, 119, 135), 'murs' : (52, 68, 82, 100)}
        self.coords = coordonnées
        for mat in listeMat.keys():
            if materiau in listeMat[mat]:
                self.mat = mat

        
    def __repr__(self):
        return f"Case de {self.mat}"
        
    def coordonnéesRéelles(self):
        return self.coords * 48
        
    def estDécoupable(self):
        return self.mat == grillage
    
    def estCreusable(self):
        return self.mat == terre or self.mat == carrelage
    
    def estStockage(self):
        pass
    
    def estBougeable(self):
        pass
    
    def lieu(self):
        pass
    
class Perso():
    def __init__(self):
        self.dirX = 0
        self.dirY = 0
        self.coll = (pygame.mask.Mask((10, 1), True), pygame.mask.Mask((1, 1), True))
        self.x = pygame.display.get_window_size()[0]*0.5
        self.y = pygame.display.get_window_size()[1]*0.5

def déplacement(touche, perso, speed):
    '''
    La fonction fait évoluer le déplacement dans le jeu en fonction des touches appuyée,
    du mouvement en cours et des collisions à une certaine vitesse.
    La vitesse est divisée par 1.2 à chaque tour ce qui permet de la limiter et faire
    s'arrêter le personnage progressivement
    
    '''

    perso.dirY /= 1.2
    perso.dirX /= 1.2
    

    if touche[pygame.K_UP] :
        perso.dirY -= speed
    if touche[pygame.K_DOWN] :
        perso.dirY += speed
    if touche[pygame.K_LEFT] :
        perso.dirX -= speed
    if touche[pygame.K_RIGHT] :
        perso.dirX += speed

def manageCollisions(player, mapMask, mapCoords):
    
    if player.coll[0].overlap(mapMask, (mapCoords[0] - player.x - 19, mapCoords[1] - player.y - 48)):
        if player.dirY > 0:
            player.dirY = 0
            
    if player.coll[0].overlap(mapMask, (mapCoords[0] - player.x - 19, mapCoords[1] - player.y - 24)):
        if player.dirY < 0:
            player.dirY = 0
            
            
    if player.coll[1].overlap(mapMask, (mapCoords[0] - player.x - 48, mapCoords[1] - player.y - 35)):
        if player.dirX > 0:
            player.dirX = 0
            
    if player.coll[1].overlap(mapMask, (mapCoords[0] - player.x, mapCoords[1] - player.y - 35)):
        if player.dirX < 0:
            player.dirX = 0

clock = pygame.time.Clock()

pygame.init()
pygame.mixer.init()
pygame.key.set_repeat(400, 30)
fenetre = pygame.display.set_mode((0, 0))



environnement = {'sol' : pygame.image.load("Images/Layer0.png").convert_alpha(),\
                 'grille' : pygame.image.load("Images/Layer1.png").convert_alpha(),\
                 'murs' : pygame.image.load("Images/Layer2.png").convert_alpha()}
environnement['total'] = environnement['sol']

terrain = {}
personnages = {'joueur' : pygame.image.load("Images/Perso.png").convert_alpha()}

for clé in environnement.keys():
    environnement['total'].blit(environnement[clé],(0,0))
    environnement[clé] = pygame.transform.scale_by(environnement[clé], 3)
collisions = environnement['grille']
collisions.blit(environnement['murs'],(0,0))
collisions = pygame.mask.from_surface(collisions)

for clé in personnages.keys():
    personnages[clé] = pygame.transform.scale_by(personnages[clé], 3)
    
for y in range(environnement['total'].get_height()//48):
    for x in range(environnement['total'].get_width()//48):
        terrain[(x,y)] = Case((x,y), environnement['total'].get_at((x*48, y*48)).b)
    
persoPrinc = Perso()
    

position = (-4186,-3558)

    
continuer  = True
while continuer:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            continuer = False
    touchesPressées = pygame.key.get_pressed()
    déplacement(touchesPressées, persoPrinc, 0.8)
    manageCollisions(persoPrinc, collisions, position)
    position = (position[0]-persoPrinc.dirX, position[1]-persoPrinc.dirY)
    for clé in environnement.keys():
        fenetre.blit(environnement[clé],position)
    fenetre.blit(personnages['joueur'], (persoPrinc.x, persoPrinc.y))
    pygame.display.update()
    clock.tick(60)
pygame.quit()
